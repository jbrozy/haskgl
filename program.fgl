data vertex :: {
  position :: (float, float, float),
  normal   :: (float, float, float)
}

data uniforms :: {
  modelMatrix      :: (float, float, float, float),
  viewMatrix       :: (float, float, float, float),
  projectionMatrix :: (float, float, float, float),
  lightPos         :: (float, float, float),
  cameraPos        :: (float, float, float)
}

data VertexOutput :: {
  fragPos :: (float, float, float),
  normal  :: (float, float, float)
}

data FragmentOutput :: {
  fragColor :: (float, float, float)
}

vertexShader vertex uniforms =
  VertexOutput
    ((uniforms.modelMatrix * vec4 vertex.position 1.0).xyz)
    (mat3 uniforms.modelMatrix * vertex.normal)

fragmentShader vertexOut uniforms =
  FragmentOutput
    (let
      lightDir = normalize (uniforms.lightPos - vertexOut.fragPos)
      viewDir  = normalize (uniforms.cameraPos - vertexOut.fragPos)
      reflectDir = reflect (-lightDir) (vertexOut.normal)

      ambient  = 0.1
      diff     = max (dot vertexOut.normal lightDir) 0.0
      spec     = pow (max (dot viewDir reflectDir) 0.0) 16.0

      phong = (ambient + diff + spec)
    in
      phong * vec3(1.0, 0.5, 0.3))
